# syntax=docker/dockerfile:1
ARG RUBY_VERSION=3.4.4 # Mantenha a mesma versão do seu .ruby-version
FROM ruby:$RUBY_VERSION-slim

# Variáveis de ambiente
ENV RAILS_ENV=development \
    APP_HOME=/rails

# Cria o diretório da aplicação
WORKDIR $APP_HOME

# Instala dependências do sistema
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    build-essential \
    git \
    libpq-dev \
    libyaml-dev \
    netcat-openbsd && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/*

# Copia os arquivos de gerenciamento de gem
COPY Gemfile Gemfile.lock ./

# Instala as gems (BUNDLE_WITHOUT vazio para incluir gems de development e test)
ENV BUNDLE_WITHOUT=""
RUN bundle install

# Copia o restante do código da aplicação para o container
# Isso inclui o seu script bin/docker-entrypoint LOCAL no momento do build.
# No entanto, por causa do volume .: /rails no docker-compose,
# o script LOCAL será usado em tempo de execução.
COPY . .

# Certifique-se de que o script de entrypoint copiado para a imagem tenha permissão de execução
# Isso é uma boa prática, embora o volume vá sobrepor com o local.
RUN chmod +x /rails/bin/docker-entrypoint

# Expõe a porta padrão do Rails
EXPOSE 3000

# Define o entrypoint que irá executar o script antes do CMD
ENTRYPOINT ["/rails/bin/docker-entrypoint"] 

# Comando padrão para iniciar o servidor Rails (será passado como "$@" para o entrypoint)
CMD ["./bin/rails", "server", "-b", "0.0.0.0"]